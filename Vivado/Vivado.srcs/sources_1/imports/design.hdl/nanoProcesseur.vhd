--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 9.3 Revision 2 from HDL Works B.V.
--
-- Ease library  : Work
-- HDL library   : Work
-- Host name     : NB21-B0I-YME
-- User name     : yves.meyer
-- Time stamp    : Tue Jan  2 18:25:44 2024
--
-- Designed by   : M.Meyer/Y.Meyer
-- Company       : Haute Ecole Arc
-- Project info  : nanoProcesseur
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity Work.nanoProcesseur
-- Last modified : Tue Jan  2 18:25:09 2024
--------------------------------------------------------------------------------

library ieee;
use Work.nanoProcesseur_package.all;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;

entity nanoProcesseur is
  port (
    clk_i     : in     std_logic;
    reset_i   : in     std_logic;
    PC_o      : out    std_logic_vector(7  downto 0);
    IR_i      : in     std_logic_vector(13 downto 0);
    addr_o    : out    std_logic_vector(7  downto 0);
    data_i    : in     std_logic_vector(7  downto 0);
    data_o    : out    std_logic_vector(7  downto 0);
    data_wr_o : out    std_logic);
end entity nanoProcesseur;

--------------------------------------------------------------------------------
-- Object        : Architecture Work.nanoProcesseur.Structural
-- Last modified : Tue Jan  2 18:25:09 2024
--------------------------------------------------------------------------------

architecture Structural of nanoProcesseur is

  signal loc_data_wr   : std_logic;
  signal loc_CCR_load  : std_logic;
  signal loc_oper_sel  : std_logic_vector(2 downto 0);
  signal loc_ALU       : std_logic_vector(7 downto 0);
  signal loc_PC_load   : std_logic;
  signal loc_PC_inc    : std_logic;
  signal loc_IR_load   : std_logic;
  signal loc_opcode    : std_logic_vector(5 downto 0);
  signal loc_CCR       : std_logic_vector(3 downto 0);
  signal loc_Accu_load : std_logic;
  signal loc_accu      : std_logic_vector(7  downto 0);
  signal loc_oper_addr : std_logic_vector(7  downto 0);
  signal loc_Z_C_V_N   : std_logic_vector(3 downto 0);
  signal loc_oper2     : std_logic_vector(7 downto 0);
  signal loc_oper1     : std_logic_vector(7 downto 0);
  signal loc_operande1 : std_logic_vector(7 downto 0);
  signal loc_operande2 : std_logic_vector(7 downto 0);
  signal loc_oper_load : std_logic;

  component Sequenceur
    port (
      clk_i       : in     std_logic;
      reset_i     : in     std_logic;
      PC_inc_o    : out    std_logic;
      PC_load_o   : out    std_logic;
      IR_load_o   : out    std_logic;
      opcode_i    : in     std_logic_vector(5 downto 0);
      CCR_i       : in     std_logic_vector(3 downto 0);
      oper_sel_o  : out    std_logic_vector(2 downto 0);
      oper_load_o : out    std_logic;
      Accu_load_o : out    std_logic;
      CCR_load_o  : out    std_logic;
      data_wr_o   : out    std_logic);
  end component Sequenceur;

  component Program_Counter
    port (
      clk_i     : in     std_logic;
      reset_i   : in     std_logic;
      PC_load_i : in     std_logic;
      PC_o      : out    std_logic_vector(7 downto 0);
      PC_inc_i  : in     std_logic;
      addr_i    : in     std_logic_vector(7 downto 0));
  end component Program_Counter;

  component Instruction_Register
    port (
      clk_i      : in     std_logic;
      reset_i    : in     std_logic;
      IR_load_i  : in     std_logic;
      IR_i       : in     std_logic_vector(13 downto 0);
      operande_o : out    std_logic_vector(7 downto 0);
      opcode_o   : out    std_logic_vector(5 downto 0));
  end component Instruction_Register;

  component Operandes_Multiplexer
    port (
      sel_i   : in     std_logic_vector(2 downto 0);
      Accu_i  : in     std_logic_vector(7 downto 0);
      const_i : in     std_logic_vector(7 downto 0);
      data_i  : in     std_logic_vector(7 downto 0);
      oper1_o : out    std_logic_vector(7 downto 0);
      oper2_o : out    std_logic_vector(7 downto 0));
  end component Operandes_Multiplexer;

  component ALU
    port (
      opcode_i    : in     std_logic_vector(5 downto 0);
      operande1_i : in     std_logic_vector(7 downto 0);
      operande2_i : in     std_logic_vector(7 downto 0);
      CCR_i       : in     std_logic_vector(3 downto 0);
      ALU_o       : out    std_logic_vector(7 downto 0);
      Z_C_V_N     : out    std_logic_vector(3 downto 0));
  end component ALU;

  component Status_Register
    port (
      clk_i      : in     std_logic;
      reset_i    : in     std_logic;
      CCR_load_i : in     std_logic;
      CCR_i      : in     std_logic_vector(3 downto 0);
      CCR_o      : out    std_logic_vector(3 downto 0));
  end component Status_Register;

  component W_Register
    port (
      Accu_in     : in     std_logic_vector(7 downto 0);
      Accu_load_i : in     std_logic;
      Accu_o      : out    std_logic_vector(7 downto 0);
      clk_i       : in     std_logic;
      reset_i     : in     std_logic);
  end component W_Register;

  component Operandes_Register
    port (
      clk_i       : in     std_logic;
      oper1_i     : in     std_logic_vector(7 downto 0);
      oper2_i     : in     std_logic_vector(7 downto 0);
      oper_load_i : in     std_logic;
      operande1_o : out    std_logic_vector(7 downto 0);
      operande2_o : out    std_logic_vector(7 downto 0);
      reset_i     : in     std_logic);
  end component Operandes_Register;

begin
  data_wr_o <= loc_data_wr;
  data_o <= loc_accu;
  addr_o <= loc_oper_addr;

  Seq_inst: Sequenceur
    port map(
      clk_i       => clk_i,
      reset_i     => reset_i,
      PC_inc_o    => loc_PC_inc,
      PC_load_o   => loc_PC_load,
      IR_load_o   => loc_IR_load,
      opcode_i    => loc_opcode,
      CCR_i       => loc_CCR,
      oper_sel_o  => loc_oper_sel,
      oper_load_o => loc_oper_load,
      Accu_load_o => loc_Accu_load,
      CCR_load_o  => loc_CCR_load,
      data_wr_o   => loc_data_wr);

  PC_inst: Program_Counter
    port map(
      clk_i     => clk_i,
      reset_i   => reset_i,
      PC_load_i => loc_PC_load,
      PC_o      => PC_o,
      PC_inc_i  => loc_PC_inc,
      addr_i    => loc_oper_addr);

  IR_inst: Instruction_Register
    port map(
      clk_i      => clk_i,
      reset_i    => reset_i,
      IR_load_i  => loc_IR_load,
      IR_i       => IR_i,
      operande_o => loc_oper_addr,
      opcode_o   => loc_opcode);

  OM_inst: Operandes_Multiplexer
    port map(
      sel_i   => loc_oper_sel,
      Accu_i  => loc_accu,
      const_i => loc_oper_addr,
      data_i  => data_i,
      oper1_o => loc_oper1,
      oper2_o => loc_oper2);

  ALU_inst: ALU
    port map(
      opcode_i    => loc_opcode,
      operande1_i => loc_operande1,
      operande2_i => loc_operande2,
      CCR_i       => loc_CCR,
      ALU_o       => loc_ALU,
      Z_C_V_N     => loc_Z_C_V_N);

  SR_inst: Status_Register
    port map(
      clk_i      => clk_i,
      reset_i    => reset_i,
      CCR_load_i => loc_CCR_load,
      CCR_i      => loc_Z_C_V_N,
      CCR_o      => loc_CCR);

  WR_inst: W_Register
    port map(
      Accu_in     => loc_ALU,
      Accu_load_i => loc_Accu_load,
      Accu_o      => loc_accu,
      clk_i       => clk_i,
      reset_i     => reset_i);

  OR_inst: Operandes_Register
    port map(
      clk_i       => clk_i,
      oper1_i     => loc_oper1,
      oper2_i     => loc_oper2,
      oper_load_i => loc_oper_load,
      operande1_o => loc_operande1,
      operande2_o => loc_operande2,
      reset_i     => reset_i);

end architecture Structural ; -- of nanoProcesseur

